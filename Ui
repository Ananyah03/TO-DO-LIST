import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class JsonUI extends JFrame {
    private List<PluginData> familyPlugins;
    private List<ScriptData> setupScripts;
    private JPanel inputPanel;
    private JPanel scriptPanel;

    public JsonUI() {
        familyPlugins = new ArrayList<>();
        setupScripts = new ArrayList<>();

        setTitle("Family Plugins and Setup Scripts Input");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JTabbedPane tabbedPane = new JTabbedPane();

        // Family Plugins Panel
        inputPanel = new JPanel();
        inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.Y_AXIS));
        addPluginInputFields(); // Add the input fields

        tabbedPane.add("Family Plugins", new JScrollPane(inputPanel));

        // Setup Scripts Panel
        scriptPanel = new JPanel();
        scriptPanel.setLayout(new BoxLayout(scriptPanel, BoxLayout.Y_AXIS));
        addScriptInputFields(); // Add the input fields

        tabbedPane.add("Setup Scripts", new JScrollPane(scriptPanel));

        add(tabbedPane, BorderLayout.CENTER);
    }

    private void addPluginInputFields() {
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel typeLabel = new JLabel("Type:");
        JTextField typeField = new JTextField(20);

        JLabel idsLabel = new JLabel("IDs (separated by //):");
        JTextField idsField = new JTextField(20);

        gbc.gridx = 0;
        gbc.gridy = 0;
        panel.add(typeLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        panel.add(typeField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        panel.add(idsLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        panel.add(idsField, gbc);

        inputPanel.add(panel);

        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String type = typeField.getText();
                String idsText = idsField.getText();

                if (!type.isEmpty() && !idsText.isEmpty()) {
                    String[] ids = idsText.split("//");
                    for (String id : ids) {
                        id = id.trim();
                        if (!id.isEmpty()) {
                            familyPlugins.add(new PluginData(type, id));
                        }
                    }
                    JOptionPane.showMessageDialog(JsonUI.this, "Plugins saved!");
                    saveToJavaScriptFile();
                } else {
                    JOptionPane.showMessageDialog(JsonUI.this, "Please fill in all fields.");
                }
            }
        });

        inputPanel.add(saveButton);
        inputPanel.revalidate();
        inputPanel.repaint();
    }

    private void addScriptInputFields() {
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel typeLabel = new JLabel("Type:");
        JTextField typeField = new JTextField(20);

        JLabel nameLabel = new JLabel("Name:");
        JTextField nameField = new JTextField(20);

        JLabel scriptLabel = new JLabel("Script:");
        JTextArea scriptField = new JTextArea(10, 20);
        scriptField.setLineWrap(true);
        scriptField.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane(scriptField);

        gbc.gridx = 0;
        gbc.gridy = 0;
        panel.add(typeLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        panel.add(typeField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        panel.add(nameLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        panel.add(nameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        panel.add(scriptLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(scrollPane, gbc);

        scriptPanel.add(panel);

        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String type = typeField.getText();
                String name = nameField.getText();
                String script = scriptField.getText();

                if (!type.isEmpty() && !name.isEmpty() && !script.isEmpty()) {
                    setupScripts.add(new ScriptData(type, name, script));
                    JOptionPane.showMessageDialog(JsonUI.this, "Script saved!");
                    saveToJavaScriptFile();
                } else {
                    JOptionPane.showMessageDialog(JsonUI.this, "Please fill in all fields.");
                }
            }
        });

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(saveButton);
        
        scriptPanel.add(buttonPanel);
        scriptPanel.revalidate();
        scriptPanel.repaint();
    }

    private void saveToJavaScriptFile() {
        try (FileWriter writer = new FileWriter("family_plugins_and_setup_scripts.js")) {
            writer.write(toJavaScriptString());
            JOptionPane.showMessageDialog(this, "Data saved to family_plugins_and_setup_scripts.js");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving to JavaScript file: " + e.getMessage());
        }
    }

    private String toJavaScriptString() {
        StringBuilder js = new StringBuilder();
        js.append("const familyPlugins = [\n");
        for (PluginData plugin : familyPlugins) {
            js.append("    {\n");
            js.append("        type: '").append(plugin.type).append("',\n");
            js.append("        id: '").append(plugin.id).append("'\n");
            js.append("    },\n");
        }
        js.append("];\n\n");

        js.append("const setupScripts = [\n");
        for (ScriptData script : setupScripts) {
            js.append("    {\n");
            js.append("        type: '").append(script.type).append("',\n");
            js.append("        name: '").append(script.name).append("',\n");
            js.append("        script: `").append(script.script.replace("`", "\\`")).append("`\n");
            js.append("    },\n");
        }
        js.append("];\n\n");

       

        return js.toString();
    }

    private static class PluginData {
        String type;
        String id;

        PluginData(String type, String id) {
            this.type = type;
            this.id = id;
        }
    }

    private static class ScriptData {
        String type;
        String name;
        String script;

        ScriptData(String type, String name, String script) {
            this.type = type;
            this.name = name;
            this.script = script;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JsonUI().setVisible(true);
            }
        });
    }
}
