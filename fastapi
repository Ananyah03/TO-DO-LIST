from fastapi import FastAPI, HTTPException, Depends, WebSocket
from pydantic import BaseModel
import websockets

class Item(BaseModel):
    task: str
    is_done: bool = False

app = FastAPI()
items={}

def get_item_or_404(item_id: int):
    if item_id in items:
        return items[item_id]
    else:
        raise HTTPException(status_code=404, detail="Item not found")

@app.get("/todo")
async def read_todos():
    return {"todos": [{"id": id, "task": task, "is_done": is_done} for id, (task, is_done) in items.items()]}

@app.post("/todo")
async def create_todo(item: Item):
    item_id = max(items.keys(), default=0) + 1
    items[item_id] = (item.task, item.is_done)
    return {"id": item_id, "task": item.task, "is_done": item.is_done}

@app.get("/todo/{item_id}")
async def read_todo(item_id: int, item=Depends(get_item_or_404)):
    return {"id": item_id, "task": item[0], "is_done": item[1]}

@app.put("/todo/{item_id}")
async def update_todo(item_id: int, item: Item, item_=Depends(get_item_or_404)):
    items[item_id] = (item.task, item.is_done)
    return {"id": item_id, "task": item.task, "is_done": item.is_done}

@app.delete("/todo/{item_id}")
async def delete_todo(item_id: int, item=Depends(get_item_or_404)):
    del items[item_id]
    return {"message": "Item deleted"}

async def notify_todo_created(item: Item):
    async with websockets.connect("ws://localhost:8765/") as websocket:
        await websocket.send(item.json())

@app.post("/todo")
async def create_todo(item: Item):
    await notify_todo_created(item)
    return item
